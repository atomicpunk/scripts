#!/usr/bin/python3

#
# Copyright 2012 Todd Brandt <tebrandt@frontier.com>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.
#    utility to organize media collections
#    Copyright (C) 2012 Todd Brandt <tebrandt@frontier.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import sys
import os
import shutil
import string
import re

def isValid(filename):
	exlist = ['.git']
	dirs = filename.split('/')
	for ex in exlist:
		if ex in dirs:
			return False
	return True

def findInFiles(sstring, filemask, options, binary):
	cmd = 'egrep -R '+options+' -srn --include "'+filemask+'" "'+sstring+'"'
	res = os.popen(cmd).read().strip()
	for line in res.split('\n'):
		if binary:
			if 'Binary file' in line:
				print(line)
			continue
		m = re.match('^(?P<f>[^:]*)(:)(?P<n>[^:]*)(:)(?P<l>.*)', line)
		if not m:
			continue
		file = m.group('f')
		linenum = m.group('n')
		data = m.group('l')
		if isValid(file):
			print('\033[1;34m%s\033[0m:\033[1;36m%s\033[0m:%s' % \
				(file, linenum, data))

# Function: printHelp
# Description:
#	 print out the help text
def printHelp():
	print('')
	print('Find in Files')
	print('Usage: fif <string> [-f filemask]')
	print('')
	print('Description:')
	print('  Find search string(s) in files recursively')
	print('Options:')
	print('  -h              Print this help text')
	print('  -f <filemask>   File mask for which files to search (e.g. *.c)')
	print('  -w              Whole word match')
	print('  -b              Target binary files (default is text files)')
	print('')
	return True

# Function: doError
# Description:
#    generic error function for catastrphic failures
# Arguments:
#    msg: the error message to print
#    help: True if printHelp should be called after, False otherwise
def doError(msg, help):
	if(help == True):
		printHelp()
	print('ERROR: %s\n') % msg
	sys.exit()

# ----------------- MAIN --------------------
# exec start (skipped if script is loaded as library)
if __name__ == '__main__':
	alist = ['-h', '-f']
	filemask = '*'
	sstring = ''
	options = ''
	binary = False

	if len(sys.argv) < 2:
		printHelp()
		sys.exit()

	if sys.argv[1] in alist:
		args = iter(sys.argv[1:])
	else:
		sstring = sys.argv[1]
		args = iter(sys.argv[2:])

	# loop through the command line arguments
	for arg in args:
		if(arg == '-h'):
			printHelp()
			sys.exit()
		elif(arg == '-w'):
			options = '-w'
		elif(arg == '-b'):
			binary = True
		elif(arg == '-f'):
			try:
				val = args.next()
			except:
				doError('No file mask supplied', True)
			filemask = val
		else:
			doError('Invalid argument: '+arg, True)

	if not sstring:
		doError('No search string supplied', True)

	findInFiles(sstring, filemask, options, binary)
